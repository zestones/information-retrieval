backjump tz kross search algorithm constraint satisfact backtrack algorithm backjump techniqu reduc search space increas effici backtrack level search tree valu variabl test backjump level articl fix order evalu variabl x_ldotsx_n consider appli dynam order evalu search tree visit regular backtrack backjump grey node visit definit backtrack valu variabl find solut reconsid assign variabl chang backtrack valu x_a_ldotsx_ka_k current partial assign valu x_k find solut backtrack conclud solut extend x_a_ldotsx_ka_k exist x_k chang backtrack partial assign full prove x_k lead solut prefix partial assign properti exist ltk x_ldotsx_ja_ldotsa_j extend form solut x_k algorithm prove fact directli consid x_j reconsid x_k backjumpvariablessvg backjumpvariablessvg backjumpvariablessvg exampl current assign x_x_x_x_ unsuccess x_ backtrack x_ assign backtrack algorithm elabor prove evalu x_x_x_ x_x_ x_x_x_ solut result current evalu x_x_ solut algorithm directli backjump x_ effici backjump algorithm depend high backjump ideal algorithm jump x_k whichev variabl x_j current assign x_ldotsx_j extend form solut x_k case call safe jump establish jump safe feasibl safe jump defin term set solut algorithm find practic backjump algorithm lowest effici prove safe jump algorithm method determin jump safe method cost higher cost find higher safe jump trade reduc amount search skip part search tree backjump leaf node simplest condit backjump valu variabl prove inconsist branch constraint satisfact partial evalu consist satisfi constraint involv assign variabl inconsist case consist partial solut extend consist complet solut unassign variabl assign violat constraint condit valu variabl x_k inconsist current partial solut x_ldotsx_ka_ldotsa_k call leaf dead exactli variabl x_k leaf search tree correspond node leav children figur articl backjump algorithm gaschnig backjump leaf dead end work differ backtrack x_k test inconsist branch variabl safe jump simpli evalu a_k shortest prefix x_ldotsx_ka_ldotsa_k inconsist x_ka_k a_k x_k algorithm check consist evalu x_a_ x_ka_k x_ka_k x_ka_k x_a_ x_ka_k x_ka_k x_a_ x_ka_k smallest lowest list evalu inconsist safe jump x_ka_k x_k variabl maxim check safe jump point gaschnig algorithm jump practic algorithm check evalu time check consist x_ka_k backjump intern node previou algorithm backjump valu variabl inconsist current partial solut branch allow backjump leaf node search tree intern node search tree repres assign variabl consist previou solut extend assign previou algorithm backtrack backjump case backjump intern node leaf node evalu x_k requir branch consist current assign result search prefix inconsist valu variabl succeed case prove evalu x_ka_k solut current partial evalu x_ldotsx_k recurs search algorithm solut exist point node stop solut return number dead end point algorithm prove partial solut inconsist order backjump algorithm account imposs find solut dead end safe jump index prefix dead end inconsist partial solut deadendssvg deadendsasvg deadendssvg deadendssvg exampl algorithm x_k valu three cross point inconsist second point remain inconsist valu x_k x_k remov partial evalu note valu variabl children inconsist evalu remain x_k x_k x_k algorithm backjump x_k lowest variabl maintain inconsist x_k will valu x_k algorithm backjump variabl x_i provid current truth evalu x_ldotsx_i inconsist truth evalu x_kx_k leaf node descend node x_k simplif backjump xk ancestor node shade area ignor high number node subtre x_k safe backjump x_k collect visit subtre find safe jump simplifi consider algorithm safe jump work jump highest safe jump second simplif node subtre x_l skip backjump ignor backjump x_l precis node skip backjump node x_m node x_l irrelev subtre root x_m irrelev subtre algorithm node x_l x_m path backjump directli x_l x_m backjump indic node x_l x_m irrelev subtre root x_m backjump indic visit region search tree mistak search tree ignor consid backjump x_l ancestor variabl valu suffici prove unsatisfi subtre root node collect node remov variabl node node retract fact exploit collect node set assign variabl evalu suffic prove solut exist subtre root node set built execut algorithm retract node set remov variabl node collect set destin backtrack backjump node skip backjump retract set automat ignor graphbas backjump rational graphbas backjump safe jump check variabl x_ldotsx_k constraint variabl x_kx_k instanti leaf node leaf node variabl x_i gtk instanti index equal variabl constraint x_i find safe jump valu x_k set index variabl evalu allow prove solut visit subtre root x_k result algorithm backjump highest set fact node skip backjump ignor consid backjump exploit algorithm retract leaf node set variabl constraint creat parent ancestor case backjump intern node set variabl maintain time set variabl receiv children descend variabl maintain set backtrack backjump node variabl node remov set set node destin backtrack backjump algorithm work set maintain node collect variabl relev prove unsatisfi leav descend node set variabl retrac node set collect node skip backjump automat ignor conflictbas backjump aka conflictdirect backjump cbj refin backjump algorithm larger backjump base check common presenc variabl constraint constraint caus inconsist algorithm collect violat constraint leaf node highest variabl constraint collect leav safe jump violat constraint chosen leaf affect safe jump choos constraint highest indic increas high jump reason conflictbas backjump order constraint constraint lower indic variabl prefer constraint higher variabl formal constraint prefer highest variabl lower highest variabl exclud common variabl constraint lower indic prefer leaf node algorithm choos lowest x_ldotsx_i inconsist variabl evalu leaf constraint violat evalu choos prefer collect indic algorithm variabl x_k lowest collect identifi safe jump practic algorithm simplifi collect indic singl set creat set algorithm collect node set come descend skip backjump retract node set remov variabl node collect destin backtrack backjump constraint learn refer dechter rina constraint process morgan kaufmann isbn prosser patrick hybrid algorithm constraint satisfact problem comput intellig