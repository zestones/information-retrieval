process manag comput una smith process comput oper system technolog process manag integr ani modern day oper system os os alloc resourc process enabl process share exchang inform protect resourc process process enabl synchronis process meet requir os maintain data structur process describ resourc ownership process enabl os exert control process multiprogram mani modern oper system instanc program load memori time exampl user execut program user separ copi program load memori program possibl copi load memori sever user share access execut programcod program reentr processor ani instant onli execut instruct program sever process sustain period time assign process processor interv remaind becom temporarili inact number process execut period time time call concurr execut multiprogram multitask os system execut mani process concurr multiprogram requir processor alloc process period time dealloc appropri moment processor dealloc dure execut process restart easili possibl possibl os regain control processor dure program execut order os perform dealloc alloc process issu system call sometim call softwar interrupt exampl io request occur request access file hard disk hardwar interrupt occur exampl key wa press keyboard timer preempt multitask process start restart anoth process call context switch context chang mani modern oper system process consist mani subprocess thi introduc concept thread thread view subprocess separ independ sequenc execut code process thread becom increasingli import design distribut clientserv system softwar multiprocessor system multiprogram increas effici common trait observ process associ comput program altern cpu cycl io cycl portion time requir cpu cycl process execut ie occupi cpu dure time requir io cycl process processor wait perform inputoutput actual perform inputoutput exampl thi read write file disk prior advent multiprogram comput oper singleus system user system quickli becam awar time comput wa alloc singl user processor wa idl user wa enter inform debug program exampl comput scientist observ overal perform machin improv differ process processor whenev process wa wait inputoutput uniprogram system user execut program individu execut time tn total time uni servic process consecut user uni tn howev becaus process consum cpu cycl io cycl time process actual cpu veri small fraction total execut time process process ti processor ti execut ti processor time process spend cpu ti execut total execut time process ie time cpu cycl plu io cycl carri execut complet process fact usual sum processor time process rare exce small fraction time execut ani process sum_ t_ mathrm processor lt t_ mathrm execut therefor uniprogram system processor lay idl consider proport time overcom thi ineffici multiprogram implement modern oper system linux unix microsoft window thi enabl processor switch process anoth whenev involv io phase execut sinc process time singl job runtim total time servic user multiprogram system reduc approxim multi max tn process creation process ad current manag os build data structur call process control block pcb track process memori address space alloc process action constitut creation process common event lead creation process batch job interact logon creat os spawn exist process eg parentchild process termin mani reason process termin batch job issu halt instruct user log process execut servic request termin error fault condit normal complet time limit exceed memori unavail bound violat exampl attempt access nonexist element array protect error exampl attempt write readonli file arithmet error exampl attempt divis time overrun exampl process wait longer specifi maximum event io failur invalid instruct exampl process tri execut data text privileg instruct data misus oper system intervent exampl resolv deadlock parent termin child process termin cascad termin parent request twostat process manag model oper system princip respons control execut process thi includ determin interleav pattern execut alloc resourc process design os describ behaviour process exhibit simplest model base fact process execut processor thu process consid oper system creat process process initi label place queue system process portion exist main memori wait queue opportun execut period time current process will interrupt move processor avail differ process dispatch portion os will select queue process wait process transfer processor chosen process relabel execut begun process resum process wa interrupt earlier time thi model identifi design element os repres track process process queu process threestat process manag model twostat process manag model perfectli valid design oper system absenc block processor lie idl activ process chang cpu cycl io cycl thi design doe effici processor threestat process manag model design overcom thi problem introduc call block thi describ ani process wait io event place thi case io event devic signal anoth process three thi model process current execut readi process queu prepar execut opportun block process execut event occur complet io oper ani instant process onli three singl processor comput onli process ani instant mani process readi block will associ queue process process enter system initi readi process onli enter readi process normal leav system three process occupi space main memori reason transit anoth obviou clear readi common reason thi transit process ha reach maximum allow time uninterrupt execut ie timeout occur reason imposit prioriti level determin schedul polici low level schedul arriv higher prioriti process readi block process block request someth wait request os usual form system call ie call process function os code exampl request file disk save code data memori file disk fivest process manag model three model suffici describ behavior process event extend model allow possibl event sophist design portion hard disk emul main memori call virtual memori requir addit describ process suspend main memori place virtual memori disk cours process futur time resum transfer main memori medium level schedul control event process suspend readi block rise readi suspend block suspend process suspend becom readi suspend block process suspend becom block suspend process suspend number reason signific aris process swap memori memori manag system order free memori process common reason process suspend suspend execut debug program system monitor process fivest process manag model consid follow transit describ block block suspend process requir memori block process swap memori disk transit block process readi process avail os determin readi process dispatch requir main memori maintain adequ perform block suspend readi suspend process block suspend move readi suspend event ha wait occur note thi requir inform concern suspend process access os readi suspend readi readi process main memori os will bring continu execut addit case process readi suspend ha higher prioriti ani process readi case os design dictat import higher prioriti process minimis swap readi readi suspend normal os design prefer suspend block process readi thi becaus readi process execut cpu becom avail wherea block process main memori space execut sinc wait event occur howev necessari suspend readi process onli free suffici larg block main memori final os choos suspend lowerprior readi process higherprior block process believ block process will readi process descript control process system repres data structur call process control block pcb process descriptor linux perform function travel passport pcb basic inform job includ process ha complet store ha spent resourc process identif process uniqu identifi user identif pointer connect descriptor process statu thi indic current statu process readi block readi suspend block suspend process thi inform indic current job account thi inform mainli bill purpos perform measur indic kind resourc process ha long processor mode contemporari processor incorpor mode bit defin execut capabl program processor thi bit set kernel mode user mode kernel mode commonli refer supervisor mode monitor mode ring kernel mode processor execut everi instruct hardwar repertoir wherea user mode onli execut subset instruct instruct execut onli kernel mode call kernel privileg protect instruct distinguish user mode instruct exampl io instruct privileg applic program execut user mode perform io request os perform io behalf system logic extend mode bit defin area memori processor kernel mode versu user mode mode bit set kernel mode process execut processor access kernel user partit memori howev user mode set process refer onli user memori space frequent refer class memori user space system space kernel supervisor protect space gener mode bit extend oper system protect mode bit set user mode trap instruct call supervisor call instruct thi instruct set mode bit branch locat system space sinc onli system code load system space onli system code invok trap os ha complet supervisor call reset mode bit user mode prior return kernel concept os critic correct oper execut kernel mode softwar gener system softwar applic program execut user mode thi fundament distinct usual irrefut distinct oper system system softwar system execut kernel supervisor call kernel nucleu oper system kernel oper trust softwar wa design implement wa intend implement protect mechan covertli chang action untrust softwar execut user space extens os execut user mode os doe reli correct system softwar correct oper os henc fundament design decis ani function incorpor os implement kernel implement kernel will execut kernel supervisor space access kernel will trust softwar kernel function implement execut user mode will access kernel data structur howev advantag will normal requir veri limit effort invok function kernelimpl function easi implement trap mechan authent time call usual rel expens kernel code fast larg perform overhead actual call thi subtl import point request system servic techniqu program execut user mode request kernel servic system call messag pass oper system design facil assum user process invok target system function system call approach user process trap instruct idea system call appear ordinari procedur call applic program os provid librari user function correspond actual system call stub function trap os function applic program call stub execut trap instruct switch cpu kernel mode branch indirectli os tabl entri point function invok function complet switch processor user mode return control user process thu simul normal procedur return messag pass approach user process construct messag describ desir servic trust send function pass messag trust os process send function serv purpos trap care check messag switch processor kernel mode deliv messag process implement target function meanwhil user process wait result servic request messag receiv oper os process complet oper send messag user process distinct approach ha import consequ regard rel independ os behavior applic process behavior result perform rule thumb oper system base system call interfac effici requir messag exchang distinct process thi case system call implement trap instruct trap rel expens perform effici messag pass approach gener higher cost associ process multiplex messag format messag copi system call approach ha interest properti necessarili ani os process process execut user mode chang kernel mode execut kernel code switch user mode return os call hand os design set separ process usual easier design control machin special situat kernel simpli collect function execut user process kernel mode procedurebas oper system usual find necessari includ system process es call daemon unix handl situat wherebi machin otherwis idl schedul handl network sourc oper system incorpor window unix colin ritchi isbn oper system william stall prentic hall edit multiprogram process descript control oper system modern perspect gari nutt addison wesley edit process manag model schedul unix system releas modern oper system andrew tannenbaum prentic hall edit oper system concept silberschatz galvin gagn john wiley son edit extern link stuff work oper system gener histori timelin develop list kernel gener microkernel nanokernel type monolith hybrid exokernel compon kernel space loadabl kernel modul devic driver user space userland process manag process multiprogram interrupt mode protect mode supervisor mode comput multitask schedul context switch cooper multitask preemptiv multitask cpu mode thread comput scienc memori manag memori protect segment memori manag unit segment fault gener protect fault exampl amigao beo ibm msdo window linux unix opensolari mac os reacto more miscellan concept boot loader pxe api virtual file system virtual tape librari comput network gui hal