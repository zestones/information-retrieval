recurs comput scienc kernel saunter control flow articl exampl code theoret comput scienc articl exampl scheme code recurs theori program idiom recurs comput scienc solv problem fact central idea comput scienc solv problem recurs solut depend solut smaller instanc problem power recurs evid lie possibl defin infinit set object finit statement manner infinit number comput describ finit recurs program thi program explicit repetit highlevel comput program languag support recurs allow function call program text imper languag defin loop construct loop perform repetit action function program languag defin ani loop construct reli sole recurs repeatedli call code comput theori ha proven recurs onli languag mathemat equival imper languag solv kind problem typic control structur tree creat logo program languag reli heavili recurs recurs algorithm common method simplif divid problem subproblem typethi dialect comput program techniqu thi call divid conquer key design mani import algorithm well fundament dynam program virtual program languag today allow direct specif recurs function procedur function call comput languag stackbas architectur languag implement track variou instanc function mani architectur call stack method convers everi recurs function transform iter function stack ani function evalu comput express term recurs function iter continuationpass style convers ani recurs function express term iter veri liter exampl thi unknown word book reader note current number note stack empti reader word read subject find anoth unknown word number thi word written top stack point articl read doe requir ani explan reader return previou number continu read thi repeat sequenti remov topmost note stack final reader return origin book thi recurs approach languag design logic program function program provid recurs onli repetit directli avail programm languag gener tail recurs effici iter programm express repetit structur scheme map term recurs recurs deepli embed theori comput theoret equival recurs function ture machin foundat idea univers modern comput recurs program creat recurs procedur essenti requir defin base case defin rule break complex case base case key recurs procedur recurs call problem domain reduc eventu base case arriv author classifi recurs gener structur distinct base procedur data work data data structur list procedur structur recurs otherwis gener recurs mani wellknown recurs algorithm gener entir piec data data recur htdp design program refer thi kind gener recurs exampl gener recurs includ gcd quicksort binari search mergesort newton method fractal adapt integr exampl recurs defin procedur gener recurs factori classic exampl recurs procedur function calcul factori integ function definit fact begin case mbox time fact mbox gt end case pseudocod recurs function factori input integ gt output return otherwis return factori factori recurr relat equat relat term sequenc earlier term recurr relat factori bn comput recurr relat exampl implement scheme recurs recurs input integ gt defin fact fact input integ gt int fact int return els return fact thi factori function describ recurs typic loop construct imper program languag pseudocod iter function factori input integ gt output creat variabl call running_tot valu loop exit loop set running_tot running_tot decrement repeat loop return running_tot factori scheme howev function program languag doe defin ani loop construct reli sole recurs perform loop becaus scheme tailrecurs recurs procedur defin implement factori procedur iter process constant space linear time exampl implement scheme iter iter input integ gt defin fact factit defin factit running_tot running_tot factit running_tot int fact int int running_tot running_tot running_tot return running_tot fibonacci anoth well recurs sequenc fibonacci number element thi sequenc function definit fib begin case mbox mbox fib fib mbox gt end case pseudocod function fib input integ gt return return otherwis return fib fib fib recurr relat fibonacci bn comput recurr relat exampl implement scheme integ gt defin fib cond els fib fib int fib int return els return els return fib fib implement especi bad becaus time function execut will function call turn function call bottom thi exampl tree recurs grow exponenti time linearli space requir greatest common divisor anoth famou recurs function euclidean algorithm comput greatest common divisor integ function definit gcd begin case mbox gcd remaind mbox gt mbox gt end case pseudocod recurs function gcd input integ integ gt gt return otherwis return gcd remaind gcd recurr relat greatest common divisor express remaind gcd gcd gcd comput recurr relat gcd gcd gcd comput recurr relat gcd gcd gcd gcd exampl implement scheme recurs recurs input integ gt gt defin gcd gcd remaind int gcd int int return els return gcd notic recurs exampl abov fact mere tailrecurs equival iter algorithm algorithm explicit iter doe accumul chain defer oper maintain entir variabl number step grow logarithm number involv pseudocod iter iter function gcd input integ integ gt gt creat variabl call remaind loop exit loop set remaind remaind xi set set remaind repeat loop return gcd int gcd int int int remaind remaind return iter algorithm requir temporari variabl knowledg euclidean algorithm difficult understand process simpl inspect algorithm veri step tower hanoi main articl tower hanoi full discuss thi problem descript histori solut main articl mani refer simpli problem thi three peg set disk increas size determin minimum optim number step move disk initi posit anoth peg place larger disk top smaller function definit hanoi begin case mbox hanoi mbox gt end case recurr relat hanoi hn comput recurr relat hanoi hanoi hanoi hanoi exampl implement scheme program languag program languag input integ gt defin hanoi hanoi input integ gt int hanoi int return els return hanoi recurs function explicit solut tower hanoi sequenc reduc explicit formula explicit formula tower hanoi gener hn gt binari search binari search algorithm method search order array singl element cut array half pass trick pick midpoint center array compar data point data search respond three possibl condit data data midpoint greater data search data midpoint data search recurs thi algorithm becaus pass array creat cut half binari search procedur call recurs thi time smaller array typic array size adjust manipul algorithm exhibit logarithm order growth becaus essenti divid problem domain half pass exampl implement binari search call binary_search proper initi condit input data array integ sort ascend order tofind integ search count total number element array output result binary_search int search int data int tofind int count start count top return binary_search data tofind binari search algorithm input data array integ sort ascend order tofind integ search start minimum array maximum array output posit integ tofind array data int binary_search int data int tofind int start int get midpoint int mid start start integ divis stop condit start gt return els data mid tofind found return mid els data mid gt tofind data greater tofind search lower half return binary_search data tofind start els data tofind search upper half return binary_search data tofind recurs data structur structur recurs import applic recurs comput scienc defin dynam data structur list tree recurs data structur dynam grow theoret infinit size respons runtim requir contrast static array size requir set compil time recurs algorithm particularli appropri underli problem data treat defin recurs term exampl thi illustr structur recurs thi term refer fact recurs procedur data defin recurs long programm deriv templat data definit function employ structur recurs recurs function bodi consum immedi piec compound valu link list simpl definit link list node notic especi node defin term element struct node pointer struct node struct node int data struct node pointer anoth struct node list simpli synonym struct node aka syntact sugar typedef struct node list procedur oper list data structur implement natur recurs procedur becaus data structur oper list defin recurs printlist procedur defin walk list list empti null node print data element integ implement list remain unchang printlist procedur void printlist list lst isempti lst base case printf lst gt print integ follow space printlist lst gt recurs call binari tree simpl definit binari tree node node link list defin term recurs selfreferenti pointer left point left subtre point subtre struct node int data struct node left pointer left subtre struct node point subtre tree simpli synonym struct node aka syntact sugar typedef struct node tree oper tree implement recurs note becaus selfreferenc pointer left tree oper will requir recurs call exampl fibonacci function explan abov void printtre tree isempti base case printtre gt left left printf gt print integ follow space printtre gt abov exampl illustr inord travers binari tree binari search tree special case binari tree data element node order recurs versu iter factori exampl iter implement slightli faster practic recurs thi definit euclidean algorithm implement thi result typic becaus iter function pay functioncal overhead mani time recurs function overhead rel high mani languag note faster implement factori function small integ lookup tabl type problem solut inher recurs becaus track prior exampl tree travers includ ackermann function divideandconqu algorithm quicksort algorithm implement iter help stack stack arguabl nullifi advantag iter solut anoth possibl reason choos iter recurs algorithm today program languag stack space avail thread space avail heap recurs algorithm tend requir stack space iter algorithm howev caveat regard special case tail recurs tailrecurs function main articl tail recurs tailrecurs function function recurs call doe buildup ani defer oper exampl gcd function reshown tailrecurs howev factori function reshown augment recurs becaus build defer oper perform final recurs call complet compil automat optim tailrecurs call tailrecurs function gcd will execut constant space thu process gener iter equival imper languag control structur loop tail recurs augment recurs input integ gt gt int gcd int int return els return gcd input integ gt int fact int return els return fact signific tail recurs tailrecurs call caller return posit save call stack recurs call return will branch directli previous save return posit therefor compil support tailrecurs optim tail recurs save space time order function call order call function chang execut function thi exampl languag function void recursivefunct int num num printf dn num recursivefunct num executionpng function swap void recursivefunct int num num recursivefunct num printf dn num executionpng direct indirect recurs direct recurs function call indirect recurs exampl function call function function call function function call function long chain branch possibl recurs descent parser mutual recurs anonym recurs recurs function primit recurs function function program kleeneross paradox mccarthi function ackermann function sierpiski curv note refer epp susanna discret mathemat applic graham ronald donald knuth oren patashnik concret mathemat chapter recurr problem wirth niklau algorithm data structur program prenticehal felleisen matthia robert bruce findler matthew flatt shriram krishnamurthi design program introduct comput program cambridg mass mit press gener recurs felleisen matthia develop interact web program jeur johan advanc function program intern school oxford uk springer epp susanna discret mathemat applic brookscol publish compani abelson harold gerald jay sussman structur interpret comput program abelson harold gerald jay sussman structur interpret comput program graham ronald donald knuth oren patashnik concret mathemat chapter tower hanoi epp susanna discret mathemat applic tower hanoi epp susanna discret mathemat applic explicit formula tower hanoi sequenc wirth niklau algorithm data structur program prenticehal felleisen matthia develop interact web program jeur johan advanc function program intern school oxford uk springer extern link harold abelson gerald sussman structur interpret comput program ibm developerwork master recurs program david touretzki common lisp gentl introduct symbol comput matthia felleisen design program introduct comput program recurs primer zeeshan amjad