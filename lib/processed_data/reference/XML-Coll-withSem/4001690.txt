backjump kross search algorithm constraint satisfact backtrack algorithm backjump techniqu reduc search space therefor increas effici backtrack alway goe level search tree valu variabl test backjump level thi articl order evalu variabl ldot x_n consider appli dynam order evalu search tree visit regular backtrack backjump grey node visit definit whenev backtrack ha tri valu variabl find ani solut reconsid previous assign variabl chang valu backtrack valu tri ldot x_ka_k current partial assign valu x_ tri find solut backtrack conclud solut extend ldot x_ka_k exist goe x_k chang valu possibl backtrack otherwis partial assign alway necessari full prove valu x_ lead solut prefix partial assign properti exist lt ldot ldot a_j extend form solut whatev valu x_ algorithm prove thi fact directli consid differ valu x_j reconsid x_k normal exampl current assign ha unsuccess tri everi possibl valu backtrack goe tri assign valu backtrack algorithm elabor prove evalu ani solut result current evalu ani solut algorithm directli backjump tri valu effici backjump algorithm depend high abl backjump ideal algorithm jump x_ whichev variabl x_j current assign ldot x_j extend form solut ani valu x_ thi case call safe jump establish jump safe alway feasibl safe jump defin term set solut algorithm tri find practic backjump algorithm lowest effici prove safe jump differ algorithm differ method determin jump safe method differ cost higher cost find higher safe jump trade reduc amount search skip search tree backjump leaf node simplest condit backjump possibl valu variabl prove inconsist branch constraint satisfact partial evalu consist onli satisfi constraint involv assign variabl inconsist otherwis case consist partial solut extend consist complet solut becaus unassign variabl assign violat constraint condit valu variabl x_ inconsist current partial solut ldot ldot a_k call leaf dead thi happen exactli variabl x_ leaf search tree correspond node onli leav children figur thi articl backjump algorithm gaschnig doe backjump onli leaf dead word work differ backtrack onli everi possibl valu x_ ha test result inconsist branch anoth variabl safe jump simpli evalu everi valu a_ shortest prefix ldot ldot a_k inconsist x_ a_ word a_ possibl valu x_ algorithm check consist follow evalu x_ a_ x_ka_k x_ a_ x_ a_ x_ a_ x_ a_ smallest lowest list evalu inconsist safe jump x_ a_ onli possibl valu x_ sinc everi variabl usual valu maxim check valu safe jump point gaschnig algorithm jump practic algorithm check evalu abov time check consist x_ a_ backjump intern node previou algorithm onli backjump valu variabl inconsist current partial solut branch word allow backjump onli leaf node search tree intern node search tree repres assign variabl consist previou solut extend thi assign previou algorithm alway backtrack backjump thi case backjump intern node leaf node inde evalu x_ requir branch becaus consist current assign result search prefix inconsist valu variabl doe succeed case prove evalu x_ a_ solut current partial evalu ldot x_k recurs search algorithm solut exist thi point becaus thi node solut thi return number dead point algorithm ha prove partial solut inconsist order backjump algorithm ha account imposs find solut dead safe jump prefix dead inconsist partial solut thi exampl algorithm x_ tri possibl valu becaus three cross point inconsist second point remain inconsist valu x_ x_k remov partial evalu note valu variabl children inconsist evalu remain x_ x_ x_k algorithm backjump x_ sinc thi lowest variabl maintain inconsist valu x_ will tri word valu x_ tri algorithm backjump variabl x_i provid current truth evalu ldot x_i inconsist truth evalu x_ x_ leaf node descend node x_ simplif possibl backjump ancestor node shade area ignor potenti high number node subtre x_ inform necessari safe backjump x_ collect dure visit subtre find safe jump simplifi consider algorithm safe jump work jump highest possibl safe jump second simplif node subtre x_l skip backjump ignor backjump x_l precis node skip backjump node x_m node x_l irrelev subtre root x_m irrelev subtre inde algorithm node x_l x_m path backjump directli x_l x_m inde backjump indic node x_l x_m irrelev subtre root x_m word backjump indic visit region search tree mistak thi search tree therefor ignor consid possibl backjump x_l ancestor variabl valu suffici prove unsatisfi subtre root node collect node remov variabl node node abov retract thi fact exploit collect node set previous assign variabl evalu suffic prove solut exist subtre root node thi set built dure execut algorithm retract node thi set remov variabl node collect set destin backtrack backjump sinc node skip backjump retract set automat ignor graphbas backjump rational graphbas backjump safe jump check variabl ldot x_k constraint variabl x_ x_ instanti leaf node everi leaf node everi variabl x_i gt instanti equal variabl constraint x_i find safe jump valu x_ tri thi set variabl evalu allow prove solut visit subtre root x_ result algorithm backjump highest thi set fact node skip backjump ignor consid backjump exploit follow algorithm retract leaf node set variabl constraint creat parent ancestor case backjump everi intern node set variabl maintain everi time set variabl receiv children descend variabl ad maintain set backtrack backjump node variabl node remov thi set set node destin backtrack backjump thi algorithm work becaus set maintain node collect variabl relev prove unsatisfi leav descend thi node sinc set variabl onli retrac node set collect node skip backjump automat ignor conflictbas backjump aka conflictdirect backjump cbj refin backjump algorithm sometim abl larger backjump base check onli common presenc variabl constraint constraint actual caus inconsist thi algorithm collect violat constraint everi leaf everi node highest variabl constraint collect leav safe jump violat constraint chosen leaf doe affect safe result jump choos constraint highest possibl indic increas high jump thi reason conflictbas backjump order constraint constraint lower indic variabl prefer constraint higher variabl formal constraint prefer anoth highest variabl lower highest variabl word exclud common variabl constraint ha lower indic prefer leaf node algorithm choos lowest ldot x_i inconsist variabl evalu leaf constraint violat thi evalu choos prefer collect indic thi algorithm variabl x_ lowest collect identifi safe jump practic thi algorithm simplifi collect indic singl set creat set everi valu algorithm collect node set descend skip backjump retract thi node thi set remov variabl node collect destin backtrack backjump constraint learn refer dechter rina constraint process morgan kaufmann isbn prosser patrick hybrid algorithm constraint satisfact problem comput intellig