dekker algorithm michael slone distribut system concurr control concurr algorithm dekker algorithm concurr program algorithm mutual exclus deriv dutch mathematician dekker allow thread share singleus resourc conflict onli share memori commun avoid strict altern naiv turntak algorithm wa mutual exclus algorithm invent introduct process attempt enter critic time algorithm will allow onli process base turn process alreadi critic process will busi wait process exit thi flag indic intent enter critic turn variabl indic ha prioriti process pseudocod fals fals turn true true turn turn fals fals turn turn true true critic critic remaind remaind turn turn fals fals process indic intent enter critic test outer loop process ha flag intent critic enter safe irrespect current turn mutual exclus will guarante process becom critic befor set flag impli process will enter loop thi guarante progress wait will occur process ha withdrawn intent becom critic altern process variabl wa set loop enter turn variabl will establish permit becom critic process prioriti will withdraw intent enter critic prioriti inner loop process prioriti will break loop enter critic dekker algorithm guarante mutual exclus freedom deadlock freedom starvat whi properti hold suppos stuck insid loop forev freedom deadlock eventu will proceed critic set turn valu turn will remain unchang long doe nt progress eventu will break inner turn loop wa stuck will set true settl wait becom fals sinc turn will action loop time tri enter critic will forc execut action loop will eventu set fals stuck turn loop sinc turn remain time control pass will exit loop enter critic algorithm modifi perform action loop check turn possibl starvat thu step algorithm necessari note advantag thi algorithm doe nt requir special testandset atom readmodifywrit instruct therefor highli portabl languag machin architectur disadvantag limit process busi wait process suspens busi wait process spend minimum time insid critic modern oper system provid mutual exclus primit gener flexibl dekker algorithm howev note absenc actual content process entri exit critic extrem effici dekker algorithm mani modern cpu execut instruct outoford fashion thi algorithm wo nt work smp machin equip cpu memori barrier addit mani optim compil perform transform will caus thi algorithm fail platform mani languag legal compil detect flag variabl access loop remov write variabl loop process call loopinvari code motion possibl mani compil detect turn variabl modifi inner loop perform transform result potenti infinit loop transform perform algorithm will fail architectur allevi thi problem volatil variabl mark modifi outsid scope current execut context exampl java annot variabl volatil note howev cc volatil attribut onli guarante compil gener code proper order doe includ necessari memori barrier guarante inord execut code peterson algorithm lamport bakeri algorithm refer